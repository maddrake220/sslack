{"version":3,"sources":["webpack://sslack/./components/ChatBox/styles.tsx","webpack://sslack/./components/ChatBox/index.tsx","webpack://sslack/./components/ChatList/styles.tsx","webpack://sslack/./components/Chat/styles.tsx","webpack://sslack/./components/Chat/index.tsx","webpack://sslack/./components/ChatList/index.tsx","webpack://sslack/./utils/makeSection.ts"],"names":["ChatArea","Form","MentionsTextarea","MentionsInput","Toolbox","SendButton","EachMention","focus","chat","onChangeChat","onSubmitForm","placeholder","data","userData","useSWR","workspace","useParams","memberData","fetcher","onKeydownChat","useCallback","e","console","log","key","shiftKey","preventDefault","textareaRef","useRef","useEffect","current","autosize","renderSuggestion","suggestion","search","highlightedDisplay","index","src","gravatar","email","s","d","alt","nickname","onSubmit","id","value","onChange","onKeyPress","inputRef","allowSuggestionsAboveCursor","appendSpaceOnAdd","trigger","map","v","display","className","trim","data-qa","aria-label","data-sk","type","disabled","aria-hidden","ChatZone","Section","StickyHeader","ChatWrapper","Chat","user","Sender","User","result","useMemo","regexifyString","input","content","pattern","decorator","match","arr","to","dayjs","createdAt","format","memo","forwardRef","chatSections","setSize","isReachingEnd","scrollRef","onScroll","values","scrollTop","prevSize","then","getScrollHeight","scrollHeight","autoHide","ref","onScrollFrame","Object","entries","date","chats","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push"],"mappings":"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","file":"13.js","sourcesContent":["import styled from '@emotion/styled';\r\nimport { MentionsInput } from 'react-mentions';\r\n\r\nexport const ChatArea = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  padding: 20px;\r\n  padding-top: 0;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  color: rgb(29, 28, 29);\r\n  font-size: 15px;\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  border: 1px solid rgb(29, 28, 29);\r\n`;\r\n\r\nexport const MentionsTextarea = styled(MentionsInput)`\r\n  font-family: Slack-Lato, appleLogo, sans-serif;\r\n  font-size: 15px;\r\n  padding: 8px 9px;\r\n  width: 100%;\r\n  & strong {\r\n    // nested selector\r\n    background: skyblue;\r\n  }\r\n  & textarea {\r\n    height: 44px;\r\n    padding: 9px 10px !important;\r\n    outline: none !important;\r\n    border-radius: 4px !important;\r\n    resize: none !important;\r\n    line-height: 22px;\r\n    border: none;\r\n  }\r\n  & ul {\r\n    border: 1px solid lightgray;\r\n    max-height: 200px;\r\n    overflow-y: auto;\r\n    padding: 9px 10px;\r\n    background: white;\r\n    border-radius: 4px;\r\n    width: 150px;\r\n  }\r\n`;\r\n\r\nexport const Toolbox = styled.div`\r\n  position: relative;\r\n  background: rgb(248, 248, 248);\r\n  height: 41px;\r\n  display: flex;\r\n  border-top: 1px solid rgb(221, 221, 221);\r\n  align-items: center;\r\n  border-bottom-left-radius: 4px;\r\n  border-bottom-right-radius: 4px;\r\n`;\r\n\r\nexport const SendButton = styled.button`\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 5px;\r\n`;\r\n\r\nexport const EachMention = styled.button<{ focus: boolean }>`\r\n  padding: 4px 20px;\r\n  background: transparent;\r\n  border: none;\r\n  display: flex;\r\n  align-items: center;\r\n  color: rgb(28, 29, 28);\r\n  width: 100%;\r\n  & img {\r\n    margin-right: 5px;\r\n  }\r\n  ${({ focus }) =>\r\n    focus &&\r\n    `\r\n    background: #1264a3;\r\n    color: white;\r\n  `};\r\n`;\r\n","import React, { useCallback, VFC, useRef, useEffect } from 'react';\r\nimport { ChatArea, EachMention, Form, SendButton, Toolbox, MentionsTextarea } from './styles';\r\nimport { Mention, SuggestionDataItem } from 'react-mentions';\r\nimport autosize from 'autosize';\r\nimport useSWR from 'swr';\r\nimport { IUser } from '@typings/db';\r\nimport { useParams } from 'react-router';\r\nimport fetcher from '@utils/fetcher';\r\nimport gravatar from 'gravatar';\r\ninterface Props {\r\n  chat: string;\r\n  onSubmitForm: (e: any) => void;\r\n  onChangeChat: (e: any) => void;\r\n  placeholder?: string;\r\n}\r\n\r\nconst ChatBox: VFC<Props> = ({ chat, onChangeChat, onSubmitForm, placeholder }) => {\r\n  const { data: userData } = useSWR<IUser>(`/api/users`);\r\n  const { workspace } = useParams<{ workspace: string }>();\r\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\r\n\r\n  const onKeydownChat = useCallback(\r\n    (e) => {\r\n      console.log('CHAT:', chat);\r\n      console.log(e.key);\r\n      if (e.key === 'Enter') {\r\n        if (!e.shiftKey) {\r\n          e.preventDefault();\r\n          onSubmitForm(e);\r\n        }\r\n      }\r\n    },\r\n    [onSubmitForm],\r\n  );\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n  useEffect(() => {\r\n    if (textareaRef.current) {\r\n      autosize(textareaRef.current);\r\n    }\r\n  }, []);\r\n\r\n  const renderSuggestion = useCallback(\r\n    (\r\n      suggestion: SuggestionDataItem,\r\n      search: string,\r\n      highlightedDisplay: React.ReactNode,\r\n      index: number,\r\n      focus: boolean,\r\n    ): React.ReactNode => {\r\n      if (!memberData) return;\r\n      return (\r\n        <EachMention focus={focus}>\r\n          <img\r\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\r\n            alt={memberData[index].nickname}\r\n          />\r\n          <span>{highlightedDisplay}</span>\r\n        </EachMention>\r\n      );\r\n    },\r\n    [memberData],\r\n  );\r\n\r\n  return (\r\n    <ChatArea>\r\n      <Form onSubmit={onSubmitForm}>\r\n        <MentionsTextarea\r\n          id=\"editor-chat\"\r\n          value={chat}\r\n          onChange={onChangeChat}\r\n          onKeyPress={onKeydownChat}\r\n          placeholder={placeholder}\r\n          inputRef={textareaRef}\r\n          allowSuggestionsAboveCursor\r\n        >\r\n          <Mention\r\n            appendSpaceOnAdd\r\n            trigger=\"@\"\r\n            data={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\r\n            renderSuggestion={renderSuggestion}\r\n          />\r\n        </MentionsTextarea>\r\n        <Toolbox>\r\n          <SendButton\r\n            className={\r\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\r\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\r\n            }\r\n            data-qa=\"texty_send_button\"\r\n            aria-label=\"Send message\"\r\n            data-sk=\"tooltip_parent\"\r\n            type=\"submit\"\r\n            disabled={!chat?.trim()}\r\n          >\r\n            <i className=\"c-icon c-icon--paperplane-filled\" aria-hidden=\"true\" />\r\n          </SendButton>\r\n        </Toolbox>\r\n      </Form>\r\n    </ChatArea>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ChatZone = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex: 1;\r\n`;\r\n\r\nexport const Section = styled.section`\r\n  margin-top: 20px;\r\n  border-top: 1px solid #eee;\r\n`;\r\n\r\nexport const StickyHeader = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex: 1;\r\n  width: 100%;\r\n  position: sticky;\r\n  top: 14px;\r\n  & button {\r\n    font-weight: bold;\r\n    font-size: 13px;\r\n    height: 28px;\r\n    line-height: 27px;\r\n    padding: 0 16px;\r\n    z-index: 2;\r\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\r\n    border-radius: 24px;\r\n    position: relative;\r\n    top: -13px;\r\n    background: white;\r\n    border: none;\r\n    outline: none;\r\n  }\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ChatWrapper = styled.div`\r\n  display: flex;\r\n  padding: 8px 20px;\r\n  &:hover {\r\n    background: #eee;\r\n  }\r\n  & .chat-img {\r\n    display: flex;\r\n    width: 36px;\r\n    margin-right: 8px;\r\n    & img {\r\n      width: 36px;\r\n      height: 36px;\r\n    }\r\n  }\r\n`;\r\n","import { IChat, IDM } from '@typings/db';\r\nimport React, { VFC, memo, useMemo } from 'react';\r\nimport { ChatWrapper } from './styles';\r\nimport gravatar from 'gravatar';\r\nimport dayjs from 'dayjs';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport regexifyString from 'regexify-string';\r\nimport { stringify } from 'querystring';\r\n\r\ninterface Props {\r\n  data: IDM | IChat;\r\n}\r\n\r\nfunction a(b: number | string | number[]) {\r\n  if (typeof b === 'number') {\r\n    b.toFixed();\r\n  }\r\n  if (typeof b === 'string') {\r\n    b.slice();\r\n  }\r\n  if (Array.isArray(b)) {\r\n    b.forEach(() => {});\r\n  }\r\n}\r\n// Typescript TypeGuard 예시..\r\n\r\nconst Chat: VFC<Props> = ({ data }) => {\r\n  const user = 'Sender' in data ? data.Sender : data.User;\r\n  // TypeGuard -> 'Sender'가 data에 있으면 DM or Channel\r\n\r\n  // const { workspace } = useParams<{ workspace: string }>();\r\n  const result = useMemo(\r\n    () =>\r\n      regexifyString({\r\n        input: data.content,\r\n        pattern: /@\\[(.+?)\\]\\((\\d+?)\\)|[\\n]/g,\r\n        //   -> g (모두 찾는것)  -> (하나만),\r\n        // . -> 모든 글자 한개 이상\r\n        // \\d -> 숫자\r\n        // + -> 하나 이상\r\n        // ? -> 0개나 1개\r\n        // * -> 0개 이상\r\n        // | -> 또는\r\n        // \\n -> 줄바꿈\r\n\r\n        // EX ))\r\n        // @[userName](4)\r\n        // + 만 있으면 [userName] 최대한 많이\r\n        // +? 는 최대한 조금\r\n        decorator(match, index) {\r\n          const arr = match.match(/@\\[(.+?)\\]\\((\\d+?)\\)/)!;\r\n          console.log(arr);\r\n          if (arr) {\r\n            return (\r\n              <Link key={match + index} to={`${arr[2]}`}>\r\n                @{arr[1]}\r\n              </Link>\r\n            );\r\n          }\r\n          return <br key={index} />;\r\n        },\r\n      }),\r\n    [data.content],\r\n  );\r\n  return (\r\n    <ChatWrapper>\r\n      <div className=\"chat-img\">\r\n        <img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\r\n      </div>\r\n      <div className=\"chat-text\">\r\n        <div className=\"chat-user\">\r\n          <b>{user.nickname}</b>\r\n          <span>{dayjs(data.createdAt).format('h:mm A')}</span>\r\n        </div>\r\n        <p>{result}</p>\r\n      </div>\r\n    </ChatWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(Chat);\r\n\r\n/*\r\n memo => 보통 말단컴포넌트를 캐싱하여\r\n 리렌더링 비효율을 최소화 한다.\r\n\r\n useMemo => 정규표현식같이 계산해야하는 부분에서 캐싱하면 좋다.\r\n useMemo(()=> ,[//해당 데이터])\r\n*/\r\n","import { IChat, IDM } from '@typings/db';\r\nimport React, { useRef, useCallback, VFC, forwardRef, MutableRefObject } from 'react';\r\nimport { ChatZone, Section, StickyHeader } from './styles';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport Chat from '@components/Chat';\r\ninterface Props {\r\n  chatSections: { [key: string]: (IDM | IChat)[] };\r\n  setSize: (f: (size: number) => number) => Promise<IDM[][] | IChat[][] | undefined>;\r\n  isReachingEnd: boolean;\r\n}\r\n\r\n// forwardRef : 다른 컴포넌트에서 ref를 사용하고 싶을 때\r\n\r\nconst ChatList = forwardRef<Scrollbars, Props>(({ chatSections, setSize, isReachingEnd }, scrollRef) => {\r\n  const onScroll = useCallback((values) => {\r\n    if (values.scrollTop === 0 && !isReachingEnd) {\r\n      setSize((prevSize: number) => prevSize + 1).then(() => {\r\n        const current = (scrollRef as MutableRefObject<Scrollbars>)?.current;\r\n        if (current) {\r\n          current.scrollTop(current.getScrollHeight() - values.scrollHeight);\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n  return (\r\n    <ChatZone>\r\n      <Scrollbars autoHide ref={scrollRef} onScrollFrame={onScroll}>\r\n        {/* 객체를 map 할 때 entries 사용 */}\r\n        {Object.entries(chatSections).map(([date, chats]) => {\r\n          console.log('chatSections ==> ', chatSections);\r\n          return (\r\n            <Section className={`section-${date}`} key={date}>\r\n              <StickyHeader>\r\n                <button>{date}</button>\r\n              </StickyHeader>\r\n              {chats.map((chat) => (\r\n                <Chat key={chat.id} data={chat} />\r\n              ))}\r\n            </Section>\r\n          );\r\n        })}\r\n      </Scrollbars>\r\n    </ChatZone>\r\n  );\r\n});\r\n\r\nexport default ChatList;\r\n","import { IDM, IChat } from '@typings/db';\r\nimport dayjs from 'dayjs';\r\n\r\nexport default function makeSection(chatList: (IDM | IChat)[]) {\r\n  const sections: { [key: string]: (IDM | IChat)[] } = {};\r\n  chatList.forEach((chat) => {\r\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\r\n    if (Array.isArray(sections[monthDate])) {\r\n      sections[monthDate].push(chat);\r\n    } else {\r\n      sections[monthDate] = [chat];\r\n    }\r\n  });\r\n  return sections;\r\n}\r\n"],"sourceRoot":""}