{"version":3,"sources":["webpack://sslack/./pages/DirectMessage/styles.tsx","webpack://sslack/./pages/DirectMessage/index.tsx"],"names":["Container","Header","workspace","id","useParams","data","userData","useSWR","fetcher","myData","chat","onChangeChat","setChat","useInput","socket","useSocket","scrollbarRef","useRef","chatData","mutate","mutateChat","revalidate","revalidateChat","setSize","useSWRInfinite","index","isReachingEnd","length","onSubmitForm","useCallback","e","preventDefault","trim","savedChat","prevChatData","unshift","content","SenderId","Sender","ReceiverId","Receiver","createdAt","Date","then","current","scrollToBottom","axios","catch","error","console","dir","onMessage","Number","getScrollHeight","getClientHeight","log","getValues","setTimeout","useEffect","on","chatSections","makeSection","flat","reverse","src","gravatar","email","s","d","alt","nickname","ChatList","ref","ChatBox"],"mappings":"oJAEO,MAAMA,GAAY,cAAH,oBAAG,CAAH,oHAQTC,GAAS,iBAAH,oBAAG,CAAH,kPAcK,cAAH,oBAAG,CAAH,mM,0HCgHrB,QA1HA,WAAyB,QACvB,MAAM,UAAEC,EAAF,GAAaC,IAAOC,WAClBC,KAAMC,IAAaC,QAAQ,mBAAkBL,WAAmBC,IAAMK,MACtEH,KAAMI,IAAWF,QAAO,aAAcC,MACvCE,EAAMC,EAAcC,IAAWC,OAAS,KACxCC,IAAUC,OAAUb,GACrBc,GAAeC,YAAmB,OAGtCZ,KAAMa,EACNC,OAAQC,EACRC,WAAYC,EAHR,QAIJC,IACEC,SACDC,GAAW,mBAAkBvB,SAAiBC,2BAA4BsB,EAAQ,KACnFjB,KAMIkB,EADoC,KAA1BR,SAAA,UAAAA,EAAW,UAAX,eAAeS,SACGT,IAAY,UAAAA,EAASA,EAASS,OAAS,UAA3B,eAA+BA,QAAS,KAAO,EAGvFC,GAAeC,kBAClBC,IAEC,GADAA,EAAEC,iBACErB,WAAMsB,QAAUd,EAAU,CAC5B,MAAMe,EAAYvB,EAClBU,GAAYc,IAAiB,MAU3B,OATAA,WAAe,GAAGC,QAAQ,CACxBhC,KAAK,UAAAe,EAAS,GAAG,UAAZ,eAAgBf,KAAM,GAAK,EAChCiC,QAASH,EACTI,SAAU5B,EAAON,GACjBmC,OAAQ7B,EACR8B,WAAYjC,EAASH,GACrBqC,SAAUlC,EACVmC,UAAW,IAAIC,OAEVR,KACN,GACAS,MAAK,KAAM,MACV/B,EAAQ,IACR,UAAAI,EAAa4B,eAAb,SAAsBC,oBAG1BC,SACS,mBAAkB5C,SAAiBC,UAAY,CACpDiC,QAAS1B,IAEViC,MAAK,KACJ/B,EAAQ,OAETmC,OAAOC,IACNC,QAAQC,IAAIF,GACZ1B,UAIR,CAACZ,EAAMQ,EAAUT,EAAQH,EAAUJ,EAAWC,IAG1CgD,GAAYtB,kBAAaxB,IACzBA,EAAKgC,WAAae,OAAOjD,IAAOM,EAAON,KAAOiD,OAAOjD,IACvDiB,GAAYF,IACVA,WAAW,GAAGiB,QAAQ9B,GACfa,KACN,GAAOyB,MAAK,KAMT,MALA3B,EAAa4B,SAEb5B,EAAa4B,QAAQS,kBACrBrC,EAAa4B,QAAQU,kBAAoBtC,EAAa4B,QAAQS,kBAAoB,MAGlFJ,QAAQM,IAAI,kBAAZ,UAA+BvC,EAAa4B,eAA5C,aAA+B,EAAsBY,aACrDC,YAAW,KAAM,MACf,UAAAzC,EAAa4B,eAAb,SAAsBC,mBACrB,UAKV,IAcH,IAbAa,gBAAU,KACR5C,WAAQ6C,GAAG,KAAMR,GAEV,KACLrC,WAAQ6C,GAAG,KAAMR,MAElB,CAACrC,EAAQX,EAAIM,KAChBiD,gBAAU,KACoB,MAAH,KAArBxC,aAAA,EAAAA,EAAUS,UACZ,UAAAX,EAAa4B,eAAb,SAAsBC,oBAEvB,CAAC3B,KAECZ,IAAaG,EAChB,OAAO,KAGT,MAAMmD,GAAeC,OAAY3C,EAAWA,EAAS4C,OAAOC,UAAY,IAIxE,OAHAd,QAAQM,IAAI,sBAAuBrC,aAAnC,EAAmCA,EAAU4C,OAAOC,WAIlD,gBAAC/D,EAAD,KACE,gBAACC,EAAD,KACE,uBACE+D,IAAKC,QAAa3D,EAAS4D,MAAO,CAChCC,EAAG,OACHC,EAAG,UAELC,IAAK/D,EAASgE,YAGlB,gBAACC,EAAA,EAAD,CAAUX,aAAcA,EAAcY,IAAKxD,EAAcO,QAASA,EAASG,cAAeA,IAE1F,gBAAC+C,EAAA,EAAD,CAAS/D,KAAMA,EAAMC,aAAcA,EAAciB,aAAcA","file":"94.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  height: calc(100vh - 38px);\r\n  flex-flow: column;\r\n  position: relative;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 64px;\r\n  display: flex;\r\n  width: 100%;\r\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n  box-shadow: 0 1px 0 var(--saf-0);\r\n  padding: 20px 16px 20px 20px;\r\n  font-weight: bold;\r\n  align-items: center;\r\n  & img {\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n\r\nexport const DragOver = styled.div`\r\n  position: absolute;\r\n  top: 64px;\r\n  left: 0;\r\n  width: 100%;\r\n  height: calc(100% - 64px);\r\n  background: white;\r\n  opacity: 0.7;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 40px;\r\n`;\r\n","import React, { useEffect, useCallback, useRef } from 'react';\r\nimport { Container, Header, DragOver } from './styles';\r\nimport gravatar from 'gravatar';\r\nimport useSWR, { useSWRInfinite } from 'swr';\r\nimport fetcher from '@utils/fetcher';\r\nimport { useParams } from 'react-router';\r\nimport ChatBox from '@components/ChatBox';\r\nimport ChatList from '@components/ChatList';\r\nimport useInput from '@hooks/useInput';\r\nimport axios from 'axios';\r\nimport { IDM } from '@typings/db';\r\nimport makeSection from '@utils/makeSection';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport useSocket from '@hooks/useSocket';\r\nfunction DirectMessage() {\r\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\r\n  const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\r\n  const { data: myData } = useSWR('/api/users', fetcher);\r\n  const [chat, onChangeChat, setChat] = useInput('');\r\n  const [socket] = useSocket(workspace);\r\n  const scrollbarRef = useRef<Scrollbars>(null);\r\n\r\n  const {\r\n    data: chatData,\r\n    mutate: mutateChat,\r\n    revalidate: revalidateChat,\r\n    setSize, // page 수를 바꿔주는\r\n  } = useSWRInfinite<IDM[]>(\r\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\r\n    fetcher,\r\n  );\r\n  // useSWRInfinite : SWR에서 제공하는 infinite 구현하기 편한 메서드\r\n  // [{id: 1}, {id: 2}, {id: 3}, {id: 4}]\r\n  // useSWRInfinite -> [[{id: 1}, {id: 2}], [{id: 3}, {id: 4}]]\r\n  const isEmpty = chatData?.[0]?.length === 0;\r\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\r\n\r\n  // console.log('chatData', chatData);\r\n  const onSubmitForm = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (chat?.trim() && chatData) {\r\n        const savedChat = chat;\r\n        mutateChat((prevChatData) => {\r\n          prevChatData?.[0].unshift({\r\n            id: (chatData[0][0]?.id || 0) + 1,\r\n            content: savedChat,\r\n            SenderId: myData.id,\r\n            Sender: myData,\r\n            ReceiverId: userData.id,\r\n            Receiver: userData,\r\n            createdAt: new Date(),\r\n          });\r\n          return prevChatData;\r\n        }, false) // optimistic UI 할때는 shouldRevalidate 가 false 여야 한다.\r\n          .then(() => {\r\n            setChat('');\r\n            scrollbarRef.current?.scrollToBottom(); // 채팅시 스크롤바 아래로\r\n          });\r\n        // optimistic UI\r\n        axios\r\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\r\n            content: chat,\r\n          })\r\n          .then(() => {\r\n            setChat('');\r\n          })\r\n          .catch((error) => {\r\n            console.dir(error);\r\n            revalidateChat();\r\n          });\r\n      }\r\n    },\r\n    [chat, chatData, myData, userData, workspace, id],\r\n  );\r\n  // 로딩 시 스크롤바 제일 아래로\r\n  const onMessage = useCallback((data: IDM) => {\r\n    if (data.SenderId === Number(id) && myData.id !== Number(id)) {\r\n      mutateChat((chatData) => {\r\n        chatData?.[0].unshift(data);\r\n        return chatData;\r\n      }, false).then(() => {\r\n        if (scrollbarRef.current) {\r\n          if (\r\n            scrollbarRef.current.getScrollHeight() <\r\n            scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollHeight() + 150\r\n            // 150px 이상 스크롤을 올렸을 때는 남이 채팅을 쳐도 bottom으로 가지 않는다.\r\n          ) {\r\n            console.log('scrollToBottom!', scrollbarRef.current?.getValues());\r\n            setTimeout(() => {\r\n              scrollbarRef.current?.scrollToBottom();\r\n            }, 50);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    socket?.on('dm', onMessage);\r\n\r\n    return () => {\r\n      socket?.on('dm', onMessage);\r\n    };\r\n  }, [socket, id, myData]);\r\n  useEffect(() => {\r\n    if (chatData?.length === 1) {\r\n      scrollbarRef.current?.scrollToBottom();\r\n    }\r\n  }, [chatData]);\r\n\r\n  if (!userData || !myData) {\r\n    return null;\r\n  }\r\n\r\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\r\n  console.log('chatDataLists == > ', chatData?.flat().reverse());\r\n  // immutable 하게 reverse 하는 방법\r\n  // .flat() 다차원 배열을 1차원 배열로\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <img\r\n          src={gravatar.url(userData.email, {\r\n            s: '24px',\r\n            d: 'retro',\r\n          })}\r\n          alt={userData.nickname}\r\n        ></img>\r\n      </Header>\r\n      <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\r\n\r\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default DirectMessage;\r\n"],"sourceRoot":""}